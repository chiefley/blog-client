<?php
// Child theme functions
function thechief_child_enqueue_styles() {
    wp_enqueue_style('parent-style', get_template_directory_uri() . '/style.css');
    wp_enqueue_style('child-style', get_stylesheet_directory_uri() . '/style.css', array('parent-style'));
}
add_action('wp_enqueue_scripts', 'thechief_child_enqueue_styles');

// Make sure REST API can access site info from this child theme
function ensure_rest_access() {
    remove_filter('rest_authentication_errors', 'disable_rest_api_for_non_logged_in_users');
}
add_action('init', 'ensure_rest_access');


function genetic_algorithm_shortcode($atts, $content = null) {
    // Define default attributes
    $attributes = shortcode_atts(array(
        'mutation-level' => '5',
        'with-badger' => 'false',
        'initial-food-sources' => '25',
        'height' => '600',
        'show-controls' => 'true'
    ), $atts);

    // Convert attribute names to camelCase for React props
    $props = array(
        'mutationLevel' => intval($attributes['mutation-level']),
        'withBadger' => filter_var($attributes['with-badger'], FILTER_VALIDATE_BOOLEAN),
        'initialFoodSources' => intval($attributes['initial-food-sources']),
        'height' => intval($attributes['height']),
        'showControls' => filter_var($attributes['show-controls'], FILTER_VALIDATE_BOOLEAN)
    );

    // Convert props to JSON for the data attribute
    $props_json = json_encode($props);

    // Return the HTML markup that your React component parser expects
    return '<div class="react-component" data-component="GeneticAlgorithm" data-props=\'' . $props_json . '\'></div>';
}

// Register the shortcode
add_shortcode('genetic-algorithm', 'genetic_algorithm_shortcode');

// Also register alternative name
add_shortcode('weasel-simulation', 'genetic_algorithm_shortcode');

// Ensure shortcodes are processed in post content
add_filter('the_content', 'do_shortcode', 11);

function dawkins_weasel_shortcode($atts, $content = null) {
    // Define default attributes
    $attributes = shortcode_atts(array(
        'target-string' => 'Methinks it is like a weasel.',
        'max-generations' => '1000',
        'height' => '400',
        'show-controls' => 'true'
    ), $atts);

    // Convert attribute names to camelCase for React props
    $props = array(
        'targetString' => $attributes['target-string'],
        'maxGenerations' => intval($attributes['max-generations']),
        'height' => intval($attributes['height']),
        'showControls' => filter_var($attributes['show-controls'], FILTER_VALIDATE_BOOLEAN)
    );

    // Convert props to JSON for the data attribute
    $props_json = json_encode($props);

    // Return the HTML markup that your React component parser expects
    return '<div class="react-component" data-component="DawkinsWeasel" data-props=\'' . $props_json . '\'></div>';
}

// Register the shortcode
add_shortcode('dawkins-weasel', 'dawkins_weasel_shortcode');

// Also register alternative names
add_shortcode('dawkins-algorithm', 'dawkins_weasel_shortcode');
add_shortcode('string-evolution', 'dawkins_weasel_shortcode');


?>
